// DTO
@Data
public class ClassAggregationResultDto {
    private Long classId;
    private Integer gender; // 性別区分
    private Integer supportType; // 特別支援区分
    private Long dataCount; // 件数
    private LocalDate startDate;
    private LocalDate endDate;
}

// Mapper Interface
@Mapper
public interface ClassAggregationMapper {

    List<ClassAggregationResultDto> selectClassAggregationResult(
        @Param("yearId") Long yearId,
        @Param("baseDate") LocalDate baseDate
    );

    int deleteClassAggregation(@Param("yearId") Long yearId);

    void insertSingleAggregation(ClassAggregationResultDto dto);
}

// Mapper XML
<mapper namespace="com.example.mapper.ClassAggregationMapper">

    <select id="selectClassAggregationResult" resultType="com.example.dto.ClassAggregationResultDto">
        SELECT
            CLS_CLS_ID.学年組編成_学級クラスID AS classId,
            STDT.性別区分 AS gender,
            ISNULL(SPCL.SETU_KBN, 0) AS supportType,
            COUNT(1) AS dataCount,
            MIN(STDT_POS.開始年月日) AS startDate,
            MAX(STDT_POS.終了年月日) AS endDate
        FROM GR_CLS_ORGNZ_CLS_CLS_POS_STDT_ID CLS_CLS_ID
        INNER JOIN GR_CLS_ORGNZ_GR_STDT STDT
            ON CLS_CLS_ID.学年組編成_児童生徒ID = STDT.学年組編成_児童生徒ID
        INNER JOIN GR_CLS_ORGNZ_CLS_CLS_POS_STDT_ID STDT_POS
            ON STDT.学年組編成_児童生徒ID = STDT_POS.学年組編成_児童生徒ID
            AND CLS_CLS_ID.学年組編成_学級クラスID = STDT_POS.学年組編成_学級クラスID
            AND #{baseDate} BETWEEN STDT_POS.開始年月日 AND STDT_POS.終了年月日
        LEFT JOIN GR_CLS_ORGNZ_SPCL_SPT_CLS_SETU SPCL
            ON CLS_CLS_ID.学年組編成_学級クラスID = SPCL.学年組編成_学級クラスID
        WHERE CLS_CLS_ID.学年ID = #{yearId}
        GROUP BY
            CLS_CLS_ID.学年組編成_学級クラスID,
            STDT.性別区分,
            ISNULL(SPCL.SETU_KBN, 0)
    </select>

    <delete id="deleteClassAggregation">
        DELETE FROM GR_CLS_ORGNZ_CLS_CLS_POS_STDT
        WHERE 学年組編成_学級クラスID IN (
            SELECT 学年組編成_学級クラスID
            FROM GR_CLS_ORGNZ_CLS
            WHERE 学年ID = #{yearId}
        )
    </delete>

    <insert id="insertSingleAggregation">
        INSERT INTO GR_CLS_ORGNZ_CLS_CLS_POS_STDT (
            クラスID,
            性別区分,
            特別支援区分,
            データ件数,
            開始年月日,
            終了年月日,
            VERSION,
            CREATE_BY,
            CREATE_DATE,
            CREATE_SRV,
            UPDATE_BY,
            UPDATE_DATE,
            UPDATE_SRV,
            DEL_FLG
        ) VALUES (
            #{classId},
            #{gender},
            #{supportType},
            #{dataCount},
            #{startDate},
            #{endDate},
            1,
            'BATCH',
            CURRENT_TIMESTAMP,
            'BATCH_SERVER',
            'BATCH',
            CURRENT_TIMESTAMP,
            'BATCH_SERVER',
            0
        )
    </insert>

</mapper>

// Service
@Service
@RequiredArgsConstructor
public class ClassAggregationService {

    private final ClassAggregationMapper mapper;

    @Transactional
    public void executeAggregation(Long yearId, LocalDate baseDate) {
        mapper.deleteClassAggregation(yearId);
        List<ClassAggregationResultDto> results = mapper.selectClassAggregationResult(yearId, baseDate);
        for (ClassAggregationResultDto dto : results) {
            mapper.insertSingleAggregation(dto);
        }
    }
}

// Tasklet
@Component
@StepScope
public class ClassAggregationTasklet implements Tasklet {

    @Value("#{jobParameters['YEAR_ID']}")
    private Long yearId;

    @Value("#{jobParameters['BASE_DATE']}")
    private String baseDateStr;

    private final ClassAggregationService classAggregationService;

    public ClassAggregationTasklet(ClassAggregationService classAggregationService) {
        this.classAggregationService = classAggregationService;
    }

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        LocalDate baseDate = LocalDate.parse(baseDateStr);
        classAggregationService.executeAggregation(yearId, baseDate);
        return RepeatStatus.FINISHED;
    }
}

// Job Configuration
@Configuration
@RequiredArgsConstructor
public class ClassAggregationJobConfig {

    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;
    private final ClassAggregationTasklet tasklet;

    @Bean
    public Job classAggregationJob() {
        return jobBuilderFactory.get("classAggregationJob")
            .start(classAggregationStep())
            .build();
    }

    @Bean
    public Step classAggregationStep() {
        return stepBuilderFactory.get("classAggregationStep")
            .tasklet(tasklet)
            .build();
    }
}
